version: 0.2

phases:
  install:
    runtime-versions:
      nodejs: 16
  pre_build:
    commands:
      #登入ECR
      - aws ecr get-login-password --region ap-northeast-1 | docker login --username AWS --password-stdin 010928203930.dkr.ecr.ap-northeast-1.amazonaws.com
  build:
    commands:
      - echo Build strated on 'date'
      #获取编译源码的依赖库，不同源码用的会不一样，此命令可以自动获取
      - npm install
      - echo npm install completed on 'date'
      #进行编译
      - npm run build
      - echo npm run build completed on 'date'
      #date命令获取一下日期作为标签
      - TAG=$(date "+%Y%m%d%H%M%S")
      #build镜像(镜像名直接设置成ECR规定的名字)
      - echo "TAG is $TAG"
      - docker build -t 010928203930.dkr.ecr.ap-northeast-1.amazonaws.com/ecr0829:$TAG ./
      - echo docker build completed on 'date'
      #推送镜像
      - docker push 010928203930.dkr.ecr.ap-northeast-1.amazonaws.com/ecr0829:$TAG
      - echo docker push completed on 'date'

  post_build:
    commands:
      - echo Build completed on 'date'
      #创建一个在源码根目录重的名为imagedefinitions.json的文件
      #包含ECS Service的容器名,以及更新后要使用的image URi
      #Codepipeline的部署阶段将使用此信息来创建ECS Service引用的task定义的新version,然后它会使用新的task定义ECS Service
      # %s会被替换成后面的部分。
      - printf '[{"name":"mynginx","imageUri":"%s"}]' 010928203930.dkr.ecr.ap-northeast-1.amazonaws.com/ecr0829:$TAG > imagedefinitions.json
      - cat imagedefinitions.json
artifacts:
  files:
    - imagedefinitions.json
